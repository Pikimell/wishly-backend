service: wishly-server

frameworkVersion: '4'

useDotenv: true

plugins:
  - serverless-offline
  - serverless-domain-manager

#custom:
#  customDomain:
#    domainName: *
#    basePath: auth
#    stage: ${self:provider.stage}
#    createRoute53Record: true
#    certificateName: *

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: dev
  profile: serverlessUser
  timeout: 20
  environment:
    MONGODB_USER: ${env:MONGODB_USER}
    MONGODB_PASSWORD: ${env:MONGODB_PASSWORD}
    MONGODB_URL: ${env:MONGODB_URL}
    MONGODB_DB: ${env:MONGODB_DB}
    COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}
    COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:*
      Resource:
        - arn:aws:cognito-idp:us-east-1:884252207764:userpool/us-east-1_iLGqg20bi

#====================================================================
functions:
  registerUser:
    handler: src/handlers/authHandler.registerHandler
    events:
      - http:
          path: auth/register
          method: post

  confirmRegister:
    handler: src/handlers/authHandler.confirmRegisterHandler
    events:
      - http:
          path: auth/register/confirm
          method: post

  updateUserGroup:
    handler: src/handlers/authHandler.updateGroupHandler
    events:
      - http:
          path: auth/updateGroup
          method: post

  loginUser:
    handler: src/handlers/authHandler.loginHandler
    events:
      - http:
          path: auth/login
          method: post

  logoutUser:
    handler: src/handlers/authHandler.logoutHandler
    events:
      - http:
          path: auth/logout
          method: post

  #====================================================================

  createCollection:
    handler: src/handlers/collectionHandler.createCollectionHandler
    events:
      - http:
          path: collections
          method: post

  getCollectionById:
    handler: src/handlers/collectionHandler.getCollectionByIdHandler
    events:
      - http:
          path: collections/{id}
          method: get

  updateCollection:
    handler: src/handlers/collectionHandler.updateCollectionHandler
    events:
      - http:
          path: collections/{id}
          method: put

  deleteCollection:
    handler: src/handlers/collectionHandler.deleteCollectionHandler
    events:
      - http:
          path: collections/{id}
          method: delete

  getAllCollections:
    handler: src/handlers/collectionHandler.getAllCollectionsHandler
    events:
      - http:
          path: collections
          method: get

  addViewUser:
    handler: src/handlers/collectionHandler.addViewUserHandler
    events:
      - http:
          path: collections/{id}/view
          method: post

  addEditUser:
    handler: src/handlers/collectionHandler.addEditUserHandler
    events:
      - http:
          path: collections/{id}/edit
          method: post

  removeViewUser:
    handler: src/handlers/collectionHandler.removeViewUserHandler
    events:
      - http:
          path: collections/{id}/view
          method: delete

  removeEditUser:
    handler: src/handlers/collectionHandler.removeEditUserHandler
    events:
      - http:
          path: collections/{id}/edit
          method: delete

  cloneCollection:
    handler: src/handlers/collectionHandler.cloneCollectionHandler
    events:
      - http:
          path: collections/{id}/clone
          method: post

  #====================================================================

  createItem:
    handler: src/handlers/itemHandler.createItemHandler
    events:
      - http:
          path: collections/{collectionId}/items
          method: post

  getItemById:
    handler: src/handlers/itemHandler.getItemByIdHandler
    events:
      - http:
          path: items/{id}
          method: get

  updateItem:
    handler: src/handlers/itemHandler.updateItemHandler
    events:
      - http:
          path: items/{id}
          method: put

  deleteItem:
    handler: src/handlers/itemHandler.deleteItemHandler
    events:
      - http:
          path: items/{id}
          method: delete

  getAllItems:
    handler: src/handlers/itemHandler.getAllItemsHandler
    events:
      - http:
          path: collections/{collectionId}/items
          method: get

  markItemCompleted:
    handler: src/handlers/itemHandler.markItemCompletedHandler
    events:
      - http:
          path: items/{id}/complete
          method: post

  markItemUncompleted:
    handler: src/handlers/itemHandler.markItemUncompletedHandler
    events:
      - http:
          path: items/{id}/uncomplete
          method: post

  toggleItemStatus:
    handler: src/handlers/itemHandler.toggleItemStatusHandler
    events:
      - http:
          path: items/{id}/toggle
          method: post

  #====================================================================

  test:
    handler: src/handlers/testHandler.testHandler
    events:
      - http:
          path: test
          method: post
          authorizer:
            name: CognitoAuth
            type: COGNITO_USER_POOLS
            arn: arn:aws:cognito-idp:us-east-1:884252207764:userpool/us-east-1_iLGqg20bi

  #====================================================================
