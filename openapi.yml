openapi: 3.0.0
info:
  title: Wishly API
  description: API documentation for Wishly serverless backend
  version: 1.0.0
servers:
  - url: https://jx8nnokcgg.execute-api.us-east-1.amazonaws.com/dev
    description: Production server

paths:
  /auth/register:
    post:
      summary: Register user
      description: Registers a new user using Cognito
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /auth/register/confirm:
    post:
      summary: Confirm registration
      description: Confirms a user's registration with a verification code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                code:
                  type: string
      responses:
        '200':
          description: Confirmation successful

  /auth/updateGroup:
    post:
      summary: Update user group
      description: Updates the Cognito user group for a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                group:
                  type: string
      responses:
        '200':
          description: Group updated successfully

  /auth/login:
    post:
      summary: User login
      description: Authenticates a user and returns tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  /auth/logout:
    post:
      summary: User logout
      description: Logs out a user and invalidates their session
      responses:
        '200':
          description: Logout successful

  /users/register:
    post:
      summary: Custom user registration
      description: Registers a new user with custom user data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/login/apple:
    post:
      summary: Login with Apple
      description: Authenticates a user via Apple login
      responses:
        '200':
          description: Login successful

  /users/{id}:
    get:
      summary: Get user by ID
      description: Retrieves user information by user ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update user profile
      description: Updates user profile information
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
    delete:
      summary: Delete user
      description: Deletes a user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted

  /collections:
    post:
      summary: Create collection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collection'
      responses:
        '200':
          description: Collection created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
    get:
      summary: Get all collections
      responses:
        '200':
          description: A list of collections
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collection'

  /collections/{id}:
    get:
      summary: Get collection by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Collection found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
    put:
      summary: Update collection
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collection'
      responses:
        '200':
          description: Collection updated
    delete:
      summary: Delete collection
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Collection deleted

  /collections/{collectionId}/items:
    post:
      summary: Create item
      parameters:
        - in: path
          name: collectionId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: Item created
    get:
      summary: Get all items
      parameters:
        - in: path
          name: collectionId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'

  /items/{id}:
    get:
      summary: Get item by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Item found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
    put:
      summary: Update item
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: Item updated
    delete:
      summary: Delete item
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Item deleted

  /items/{id}/complete:
    post:
      summary: Mark item completed
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Item marked as completed

  /items/{id}/uncomplete:
    post:
      summary: Mark item uncompleted
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Item marked as uncompleted

  /items/{id}/toggle:
    post:
      summary: Toggle item status
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Item status toggled

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
    Collection:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
    Item:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        completed:
          type: boolean
